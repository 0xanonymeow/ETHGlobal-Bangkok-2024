/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as BillsIndexImport } from './routes/bills/index'
import { Route as BillsIdImport } from './routes/bills/$id'

// Create Virtual Routes

const OrdersLazyImport = createFileRoute('/orders')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const OrdersLazyRoute = OrdersLazyImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/orders.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const BillsIndexRoute = BillsIndexImport.update({
  id: '/bills/',
  path: '/bills/',
  getParentRoute: () => rootRoute,
} as any)

const BillsIdRoute = BillsIdImport.update({
  id: '/bills/$id',
  path: '/bills/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/orders': {
      id: '/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersLazyImport
      parentRoute: typeof rootRoute
    }
    '/bills/$id': {
      id: '/bills/$id'
      path: '/bills/$id'
      fullPath: '/bills/$id'
      preLoaderRoute: typeof BillsIdImport
      parentRoute: typeof rootRoute
    }
    '/bills/': {
      id: '/bills/'
      path: '/bills'
      fullPath: '/bills'
      preLoaderRoute: typeof BillsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/orders': typeof OrdersLazyRoute
  '/bills/$id': typeof BillsIdRoute
  '/bills': typeof BillsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/orders': typeof OrdersLazyRoute
  '/bills/$id': typeof BillsIdRoute
  '/bills': typeof BillsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/orders': typeof OrdersLazyRoute
  '/bills/$id': typeof BillsIdRoute
  '/bills/': typeof BillsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/orders' | '/bills/$id' | '/bills'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/orders' | '/bills/$id' | '/bills'
  id: '__root__' | '/' | '/orders' | '/bills/$id' | '/bills/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  OrdersLazyRoute: typeof OrdersLazyRoute
  BillsIdRoute: typeof BillsIdRoute
  BillsIndexRoute: typeof BillsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  OrdersLazyRoute: OrdersLazyRoute,
  BillsIdRoute: BillsIdRoute,
  BillsIndexRoute: BillsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/orders",
        "/bills/$id",
        "/bills/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/orders": {
      "filePath": "orders.lazy.tsx"
    },
    "/bills/$id": {
      "filePath": "bills/$id.tsx"
    },
    "/bills/": {
      "filePath": "bills/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
